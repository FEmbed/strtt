
app_g431_nuc32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ad8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb0  08000cb0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cb0  08000cb0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb0  08000cb0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb0  08000cb0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000cbc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000cbc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003184  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a0c  00000000  00000000  000231b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00023bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c0  00000000  00000000  00023ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016035  00000000  00000000  000241b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c48  00000000  00000000  0003a1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d3f9  00000000  00000000  0003ce2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ba226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b48  00000000  00000000  000ba27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000c98 	.word	0x08000c98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	08000c98 	.word	0x08000c98

08000218 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000224:	4907      	ldr	r1, [pc, #28]	; (8000244 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4313      	orrs	r3, r2
 800022a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800022c:	4b05      	ldr	r3, [pc, #20]	; (8000244 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800022e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4013      	ands	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000236:	68fb      	ldr	r3, [r7, #12]
}
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	40021000 	.word	0x40021000

08000248 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	683a      	ldr	r2, [r7, #0]
 8000256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr

08000264 <MX_GPIO_Init>:
/** Configure pins
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	463b      	mov	r3, r7
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]
 8000278:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800027a:	2001      	movs	r0, #1
 800027c:	f7ff ffcc 	bl	8000218 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000280:	2002      	movs	r0, #2
 8000282:	f7ff ffc9 	bl	8000218 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	481d      	ldr	r0, [pc, #116]	; (8000300 <MX_GPIO_Init+0x9c>)
 800028c:	f7ff ffdc 	bl	8000248 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = USART2_TX_Pin;
 8000290:	2304      	movs	r3, #4
 8000292:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000294:	2302      	movs	r3, #2
 8000296:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000298:	2300      	movs	r3, #0
 800029a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002a0:	2300      	movs	r3, #0
 80002a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80002a4:	2307      	movs	r3, #7
 80002a6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80002a8:	463b      	mov	r3, r7
 80002aa:	4619      	mov	r1, r3
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f000 fc28 	bl	8000b04 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 80002b4:	2308      	movs	r3, #8
 80002b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80002b8:	2302      	movs	r3, #2
 80002ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80002c8:	2307      	movs	r3, #7
 80002ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80002cc:	463b      	mov	r3, r7
 80002ce:	4619      	mov	r1, r3
 80002d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d4:	f000 fc16 	bl	8000b04 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80002d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002de:	2301      	movs	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002ea:	2300      	movs	r3, #0
 80002ec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002ee:	463b      	mov	r3, r7
 80002f0:	4619      	mov	r1, r3
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <MX_GPIO_Init+0x9c>)
 80002f4:	f000 fc06 	bl	8000b04 <LL_GPIO_Init>

}
 80002f8:	bf00      	nop
 80002fa:	3718      	adds	r7, #24
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	48000400 	.word	0x48000400

08000304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <__NVIC_SetPriorityGrouping+0x44>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800031a:	68ba      	ldr	r2, [r7, #8]
 800031c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000320:	4013      	ands	r3, r2
 8000322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800032c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000336:	4a04      	ldr	r2, [pc, #16]	; (8000348 <__NVIC_SetPriorityGrouping+0x44>)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	60d3      	str	r3, [r2, #12]
}
 800033c:	bf00      	nop
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <LL_RCC_HSI_Enable+0x1c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a04      	ldr	r2, [pc, #16]	; (8000368 <LL_RCC_HSI_Enable+0x1c>)
 8000356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800035a:	6013      	str	r3, [r2, #0]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <LL_RCC_HSI_IsReady+0x24>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800037c:	d101      	bne.n	8000382 <LL_RCC_HSI_IsReady+0x16>
 800037e:	2301      	movs	r3, #1
 8000380:	e000      	b.n	8000384 <LL_RCC_HSI_IsReady+0x18>
 8000382:	2300      	movs	r3, #0
}
 8000384:	4618      	mov	r0, r3
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000

08000394 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	061b      	lsls	r3, r3, #24
 80003a8:	4904      	ldr	r1, [pc, #16]	; (80003bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003aa:	4313      	orrs	r3, r2
 80003ac:	604b      	str	r3, [r1, #4]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <LL_RCC_SetSysClkSource+0x24>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	f023 0203 	bic.w	r2, r3, #3
 80003d0:	4904      	ldr	r1, [pc, #16]	; (80003e4 <LL_RCC_SetSysClkSource+0x24>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	608b      	str	r3, [r1, #8]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000

080003e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <LL_RCC_GetSysClkSource+0x18>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	f003 030c 	and.w	r3, r3, #12
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <LL_RCC_SetAHBPrescaler+0x24>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000414:	4904      	ldr	r1, [pc, #16]	; (8000428 <LL_RCC_SetAHBPrescaler+0x24>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4313      	orrs	r3, r2
 800041a:	608b      	str	r3, [r1, #8]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800043c:	4904      	ldr	r1, [pc, #16]	; (8000450 <LL_RCC_SetAPB1Prescaler+0x24>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	608b      	str	r3, [r1, #8]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <LL_RCC_SetAPB2Prescaler+0x24>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000464:	4904      	ldr	r1, [pc, #16]	; (8000478 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4313      	orrs	r3, r2
 800046a:	608b      	str	r3, [r1, #8]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000

0800047c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <LL_RCC_PLL_Enable+0x1c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <LL_RCC_PLL_Enable+0x1c>)
 8000486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <LL_RCC_PLL_IsReady+0x24>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80004ac:	d101      	bne.n	80004b2 <LL_RCC_PLL_IsReady+0x16>
 80004ae:	2301      	movs	r3, #1
 80004b0:	e000      	b.n	80004b4 <LL_RCC_PLL_IsReady+0x18>
 80004b2:	2300      	movs	r3, #0
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004d4:	68da      	ldr	r2, [r3, #12]
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80004d8:	4013      	ands	r3, r2
 80004da:	68f9      	ldr	r1, [r7, #12]
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	4311      	orrs	r1, r2
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	0212      	lsls	r2, r2, #8
 80004e4:	4311      	orrs	r1, r2
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	4904      	ldr	r1, [pc, #16]	; (80004fc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004ec:	4313      	orrs	r3, r2
 80004ee:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000
 8000500:	f9ff800c 	.word	0xf9ff800c

08000504 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800050e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000512:	60d3      	str	r3, [r2, #12]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <LL_APB1_GRP1_EnableClock+0x2c>)
 800052e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <LL_APB1_GRP1_EnableClock+0x2c>)
 800053a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4013      	ands	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000542:	68fb      	ldr	r3, [r7, #12]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_APB2_GRP1_EnableClock+0x2c>)
 800055e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_APB2_GRP1_EnableClock+0x2c>)
 800056a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <LL_FLASH_SetLatency+0x24>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f023 020f 	bic.w	r2, r3, #15
 8000594:	4904      	ldr	r1, [pc, #16]	; (80005a8 <LL_FLASH_SetLatency+0x24>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	600b      	str	r3, [r1, #0]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40022000 	.word	0x40022000

080005ac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <LL_FLASH_GetLatency+0x18>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f003 030f 	and.w	r3, r3, #15
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40022000 	.word	0x40022000

080005c8 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <LL_PWR_EnableRange1BoostMode+0x20>)
 80005ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <LL_PWR_EnableRange1BoostMode+0x20>)
 80005d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40007000 	.word	0x40007000

080005ec <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6093      	str	r3, [r2, #8]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40007000 	.word	0x40007000

0800060c <LL_GPIO_SetOutputPin>:
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	619a      	str	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <LL_GPIO_ResetOutputPin>:
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <start_dwt_cyccnt>:
/* Exported functions prototypes ---------------------------------------------*/
void Error_Handler(void);

/* USER CODE BEGIN EFP */

__STATIC_INLINE uint32_t start_dwt_cyccnt(void) {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	 * avaialable only starting from CM3
	 */

#if (__CORTEX_M >= 0x03U)
	static int dwt_started = 0;
	if (dwt_started == 0) {
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <start_dwt_cyccnt+0x40>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d111      	bne.n	8000674 <start_dwt_cyccnt+0x30>
		dwt_started = 1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <start_dwt_cyccnt+0x40>)
 8000652:	2201      	movs	r2, #1
 8000654:	601a      	str	r2, [r3, #0]
		/* Enable Tracing */
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <start_dwt_cyccnt+0x44>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <start_dwt_cyccnt+0x44>)
 800065c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000660:	60d3      	str	r3, [r2, #12]
		/* in Cortex M7, the trace needs to be unlocked
		 * via the DWT->LAR register with 0xC5ACCE55 value
		 */
		DWT->LAR = 0xC5ACCE55;
#endif
		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <start_dwt_cyccnt+0x48>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <start_dwt_cyccnt+0x48>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6013      	str	r3, [r2, #0]

		/* Reset counter */
		DWT->CYCCNT = 0;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <start_dwt_cyccnt+0x48>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
	}

	return DWT->CYCCNT;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <start_dwt_cyccnt+0x48>)
 8000676:	685b      	ldr	r3, [r3, #4]
#else
    return 0;
#endif
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000020 	.word	0x20000020
 8000688:	e000edf0 	.word	0xe000edf0
 800068c:	e0001000 	.word	0xe0001000

08000690 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	start_dwt_cyccnt();
 8000694:	f7ff ffd6 	bl	8000644 <start_dwt_cyccnt>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000698:	2001      	movs	r0, #1
 800069a:	f7ff ff5b 	bl	8000554 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800069e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80006a2:	f7ff ff3f 	bl	8000524 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a6:	2003      	movs	r0, #3
 80006a8:	f7ff fe2c 	bl	8000304 <__NVIC_SetPriorityGrouping>

	/* System interrupt init*/

	/** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
	 */
	LL_PWR_DisableUCPDDeadBattery();
 80006ac:	f7ff ff9e 	bl	80005ec <LL_PWR_DisableUCPDDeadBattery>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006b0:	f000 f816 	bl	80006e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006b4:	f7ff fdd6 	bl	8000264 <MX_GPIO_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (led_on) {
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <main+0x48>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <main+0x3c>
			LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80006c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <main+0x4c>)
 80006c6:	f7ff ffa1 	bl	800060c <LL_GPIO_SetOutputPin>
 80006ca:	e7f5      	b.n	80006b8 <main+0x28>
		} else {
			LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <main+0x4c>)
 80006d2:	f7ff ffa9 	bl	8000628 <LL_GPIO_ResetOutputPin>
		if (led_on) {
 80006d6:	e7ef      	b.n	80006b8 <main+0x28>
 80006d8:	20000024 	.word	0x20000024
 80006dc:	48000400 	.word	0x48000400

080006e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff ff4d 	bl	8000584 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4) {
 80006ea:	bf00      	nop
 80006ec:	f7ff ff5e 	bl	80005ac <LL_FLASH_GetLatency>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d1fa      	bne.n	80006ec <SystemClock_Config+0xc>
	}
	LL_PWR_EnableRange1BoostMode();
 80006f6:	f7ff ff67 	bl	80005c8 <LL_PWR_EnableRange1BoostMode>
	LL_RCC_HSI_Enable();
 80006fa:	f7ff fe27 	bl	800034c <LL_RCC_HSI_Enable>
	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 80006fe:	bf00      	nop
 8000700:	f7ff fe34 	bl	800036c <LL_RCC_HSI_IsReady>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d1fa      	bne.n	8000700 <SystemClock_Config+0x20>
	}

	LL_RCC_HSI_SetCalibTrimming(64);
 800070a:	2040      	movs	r0, #64	; 0x40
 800070c:	f7ff fe42 	bl	8000394 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85,
 8000710:	2300      	movs	r3, #0
 8000712:	2255      	movs	r2, #85	; 0x55
 8000714:	2130      	movs	r1, #48	; 0x30
 8000716:	2002      	movs	r0, #2
 8000718:	f7ff fed4 	bl	80004c4 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLLR_DIV_2);
	LL_RCC_PLL_EnableDomain_SYS();
 800071c:	f7ff fef2 	bl	8000504 <LL_RCC_PLL_EnableDomain_SYS>
	LL_RCC_PLL_Enable();
 8000720:	f7ff feac 	bl	800047c <LL_RCC_PLL_Enable>
	/* Wait till PLL is ready */
	while (LL_RCC_PLL_IsReady() != 1) {
 8000724:	bf00      	nop
 8000726:	f7ff feb9 	bl	800049c <LL_RCC_PLL_IsReady>
 800072a:	4603      	mov	r3, r0
 800072c:	2b01      	cmp	r3, #1
 800072e:	d1fa      	bne.n	8000726 <SystemClock_Config+0x46>
	}

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000730:	2003      	movs	r0, #3
 8000732:	f7ff fe45 	bl	80003c0 <LL_RCC_SetSysClkSource>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000736:	2080      	movs	r0, #128	; 0x80
 8000738:	f7ff fe64 	bl	8000404 <LL_RCC_SetAHBPrescaler>
	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 800073c:	bf00      	nop
 800073e:	f7ff fe53 	bl	80003e8 <LL_RCC_GetSysClkSource>
 8000742:	4603      	mov	r3, r0
 8000744:	2b0c      	cmp	r3, #12
 8000746:	d1fa      	bne.n	800073e <SystemClock_Config+0x5e>
	}

	/* Insure 1µs transition state at intermediate medium speed clock based on DWT */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <SystemClock_Config+0xb4>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a11      	ldr	r2, [pc, #68]	; (8000794 <SystemClock_Config+0xb4>)
 800074e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000752:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <SystemClock_Config+0xb8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <SystemClock_Config+0xb8>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <SystemClock_Config+0xb8>)
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
	while (DWT->CYCCNT < 100)
 8000766:	bf00      	nop
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <SystemClock_Config+0xb8>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	2b63      	cmp	r3, #99	; 0x63
 800076e:	d9fb      	bls.n	8000768 <SystemClock_Config+0x88>
		;
	/* Set AHB prescaler*/
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff fe47 	bl	8000404 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff fe58 	bl	800042c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff fe69 	bl	8000454 <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(170000000);
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <SystemClock_Config+0xbc>)
 8000784:	f000 fa46 	bl	8000c14 <LL_Init1msTick>

	LL_SetSystemCoreClock(170000000);
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <SystemClock_Config+0xbc>)
 800078a:	f000 fa51 	bl	8000c30 <LL_SetSystemCoreClock>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000edf0 	.word	0xe000edf0
 8000798:	e0001000 	.word	0xe0001000
 800079c:	0a21fe80 	.word	0x0a21fe80

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <SystemInit+0x20>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <SystemInit+0x20>)
 8000804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <LoopForever+0x6>)
  ldr r1, =_edata
 8000822:	490e      	ldr	r1, [pc, #56]	; (800085c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <LoopForever+0xe>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000838:	4c0b      	ldr	r4, [pc, #44]	; (8000868 <LoopForever+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000846:	f7ff ffd7 	bl	80007f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084a:	f000 fa01 	bl	8000c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800084e:	f7ff ff1f 	bl	8000690 <main>

08000852 <LoopForever>:

LoopForever:
    b LoopForever
 8000852:	e7fe      	b.n	8000852 <LoopForever>
  ldr   r0, =_estack
 8000854:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000860:	08000cb8 	.word	0x08000cb8
  ldr r2, =_sbss
 8000864:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000868:	20000028 	.word	0x20000028

0800086c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>

0800086e <LL_GPIO_SetPinMode>:
{
 800086e:	b480      	push	{r7}
 8000870:	b08b      	sub	sp, #44	; 0x2c
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	fa93 f3a3 	rbit	r3, r3
 8000888:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000894:	2320      	movs	r3, #32
 8000896:	e003      	b.n	80008a0 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	fab3 f383 	clz	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	2103      	movs	r1, #3
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	401a      	ands	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	fa93 f3a3 	rbit	r3, r3
 80008b6:	61fb      	str	r3, [r7, #28]
  return result;
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d101      	bne.n	80008c6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80008c2:	2320      	movs	r3, #32
 80008c4:	e003      	b.n	80008ce <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	fab3 f383 	clz	r3, r3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	431a      	orrs	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	601a      	str	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	372c      	adds	r7, #44	; 0x2c
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <LL_GPIO_SetPinOutputType>:
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	43db      	mvns	r3, r3
 80008fc:	401a      	ands	r2, r3
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	fb01 f303 	mul.w	r3, r1, r3
 8000906:	431a      	orrs	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	605a      	str	r2, [r3, #4]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <LL_GPIO_SetPinSpeed>:
{
 8000918:	b480      	push	{r7}
 800091a:	b08b      	sub	sp, #44	; 0x2c
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa93 f3a3 	rbit	r3, r3
 8000932:	613b      	str	r3, [r7, #16]
  return result;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800093e:	2320      	movs	r3, #32
 8000940:	e003      	b.n	800094a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	fab3 f383 	clz	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2103      	movs	r1, #3
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	401a      	ands	r2, r3
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	fa93 f3a3 	rbit	r3, r3
 8000960:	61fb      	str	r3, [r7, #28]
  return result;
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	2b00      	cmp	r3, #0
 800096a:	d101      	bne.n	8000970 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800096c:	2320      	movs	r3, #32
 800096e:	e003      	b.n	8000978 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	fab3 f383 	clz	r3, r3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	431a      	orrs	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	609a      	str	r2, [r3, #8]
}
 8000986:	bf00      	nop
 8000988:	372c      	adds	r7, #44	; 0x2c
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <LL_GPIO_SetPinPull>:
{
 8000992:	b480      	push	{r7}
 8000994:	b08b      	sub	sp, #44	; 0x2c
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	68da      	ldr	r2, [r3, #12]
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa93 f3a3 	rbit	r3, r3
 80009ac:	613b      	str	r3, [r7, #16]
  return result;
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80009b8:	2320      	movs	r3, #32
 80009ba:	e003      	b.n	80009c4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fab3 f383 	clz	r3, r3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2103      	movs	r1, #3
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	401a      	ands	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	fa93 f3a3 	rbit	r3, r3
 80009da:	61fb      	str	r3, [r7, #28]
  return result;
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d101      	bne.n	80009ea <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80009e6:	2320      	movs	r3, #32
 80009e8:	e003      	b.n	80009f2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	fab3 f383 	clz	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	431a      	orrs	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	60da      	str	r2, [r3, #12]
}
 8000a00:	bf00      	nop
 8000a02:	372c      	adds	r7, #44	; 0x2c
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LL_GPIO_SetAFPin_0_7>:
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	6a1a      	ldr	r2, [r3, #32]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa93 f3a3 	rbit	r3, r3
 8000a26:	613b      	str	r3, [r7, #16]
  return result;
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d101      	bne.n	8000a36 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000a32:	2320      	movs	r3, #32
 8000a34:	e003      	b.n	8000a3e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	fab3 f383 	clz	r3, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	210f      	movs	r1, #15
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	401a      	ands	r2, r3
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a4e:	6a3b      	ldr	r3, [r7, #32]
 8000a50:	fa93 f3a3 	rbit	r3, r3
 8000a54:	61fb      	str	r3, [r7, #28]
  return result;
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000a60:	2320      	movs	r3, #32
 8000a62:	e003      	b.n	8000a6c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	fab3 f383 	clz	r3, r3
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	431a      	orrs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	621a      	str	r2, [r3, #32]
}
 8000a7a:	bf00      	nop
 8000a7c:	372c      	adds	r7, #44	; 0x2c
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <LL_GPIO_SetAFPin_8_15>:
{
 8000a86:	b480      	push	{r7}
 8000a88:	b08b      	sub	sp, #44	; 0x2c
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa93 f3a3 	rbit	r3, r3
 8000aa2:	613b      	str	r3, [r7, #16]
  return result;
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000aae:	2320      	movs	r3, #32
 8000ab0:	e003      	b.n	8000aba <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	fab3 f383 	clz	r3, r3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	210f      	movs	r1, #15
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	fa93 f3a3 	rbit	r3, r3
 8000ad2:	61fb      	str	r3, [r7, #28]
  return result;
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d101      	bne.n	8000ae2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	e003      	b.n	8000aea <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	fab3 f383 	clz	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	6879      	ldr	r1, [r7, #4]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	431a      	orrs	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000af8:	bf00      	nop
 8000afa:	372c      	adds	r7, #44	; 0x2c
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	fa93 f3a3 	rbit	r3, r3
 8000b1a:	60fb      	str	r3, [r7, #12]
  return result;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <LL_GPIO_Init+0x26>
    return 32U;
 8000b26:	2320      	movs	r3, #32
 8000b28:	e003      	b.n	8000b32 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	fab3 f383 	clz	r3, r3
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000b34:	e048      	b.n	8000bc8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	4013      	ands	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d03a      	beq.n	8000bc2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d003      	beq.n	8000b5c <LL_GPIO_Init+0x58>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d10e      	bne.n	8000b7a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	461a      	mov	r2, r3
 8000b62:	69b9      	ldr	r1, [r7, #24]
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fed7 	bl	8000918 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	6819      	ldr	r1, [r3, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	461a      	mov	r2, r3
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff feb7 	bl	80008e8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	69b9      	ldr	r1, [r7, #24]
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ff05 	bl	8000992 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d111      	bne.n	8000bb4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2bff      	cmp	r3, #255	; 0xff
 8000b94:	d807      	bhi.n	8000ba6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	69b9      	ldr	r1, [r7, #24]
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff34 	bl	8000a0c <LL_GPIO_SetAFPin_0_7>
 8000ba4:	e006      	b.n	8000bb4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	461a      	mov	r2, r3
 8000bac:	69b9      	ldr	r1, [r7, #24]
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ff69 	bl	8000a86 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	69b9      	ldr	r1, [r7, #24]
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff fe56 	bl	800086e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1af      	bne.n	8000b36 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <LL_InitTick+0x30>)
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <LL_InitTick+0x30>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <LL_InitTick+0x30>)
 8000c00:	2205      	movs	r2, #5
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ffdd 	bl	8000be0 <LL_InitTick>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <LL_SetSystemCoreClock+0x1c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000

08000c50 <__libc_init_array>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	4d0d      	ldr	r5, [pc, #52]	; (8000c88 <__libc_init_array+0x38>)
 8000c54:	4c0d      	ldr	r4, [pc, #52]	; (8000c8c <__libc_init_array+0x3c>)
 8000c56:	1b64      	subs	r4, r4, r5
 8000c58:	10a4      	asrs	r4, r4, #2
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	42a6      	cmp	r6, r4
 8000c5e:	d109      	bne.n	8000c74 <__libc_init_array+0x24>
 8000c60:	4d0b      	ldr	r5, [pc, #44]	; (8000c90 <__libc_init_array+0x40>)
 8000c62:	4c0c      	ldr	r4, [pc, #48]	; (8000c94 <__libc_init_array+0x44>)
 8000c64:	f000 f818 	bl	8000c98 <_init>
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	10a4      	asrs	r4, r4, #2
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	42a6      	cmp	r6, r4
 8000c70:	d105      	bne.n	8000c7e <__libc_init_array+0x2e>
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c78:	4798      	blx	r3
 8000c7a:	3601      	adds	r6, #1
 8000c7c:	e7ee      	b.n	8000c5c <__libc_init_array+0xc>
 8000c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c82:	4798      	blx	r3
 8000c84:	3601      	adds	r6, #1
 8000c86:	e7f2      	b.n	8000c6e <__libc_init_array+0x1e>
 8000c88:	08000cb0 	.word	0x08000cb0
 8000c8c:	08000cb0 	.word	0x08000cb0
 8000c90:	08000cb0 	.word	0x08000cb0
 8000c94:	08000cb4 	.word	0x08000cb4

08000c98 <_init>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr

08000ca4 <_fini>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr
